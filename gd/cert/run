#! /bin/bash

if [[ -z "${ANDROID_BUILD_TOP}" ]]; then
  echo "ANDROID_BUILD_TOP is not set"
fi

if [[ -z "${ANDROID_HOST_OUT}" ]]; then
  echo "ANDROID_HOST_OUT is not set for host run"
fi

if ! [ -x "$(command -v python3.8)" ] ; then
    echo "You must have python 3.8 installed"
    exit 1
fi

$ANDROID_BUILD_TOP/build/soong/soong_ui.bash --build-mode --"all-modules" --dir="$(pwd)" dist bluetooth_stack_with_facade
if [[ $? -ne 0 ]] ; then
    echo "Failed to build bluetooth_stack_with_facade"
    exit 1
fi

TEST_CONFIG="$ANDROID_BUILD_TOP/system/bt/gd/cert/android_devices_config.json"
TEST_FILTER="-tf $ANDROID_BUILD_TOP/system/bt/gd/cert/all_cert_testcases"
CLEAN_VENV=false
GOTTA_GO_FAST=true
SPEED_HAX=false
NUM_REPETITIONS="1"
VERBOSE_MODE=false

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    --test_filter=*)
    TEST_FILTER="-tc ${key#*=}"
    shift # past argument=value
    ;;
    --host)
    TEST_CONFIG=$ANDROID_BUILD_TOP/system/bt/gd/cert/host_config.json
    shift # past argument
    ;;
    --test_file=*)
    TEST_FILTER="-tc ${key#*=}"
    shift # past argument
    ;;
    --test_config=*)
    TEST_CONFIG="${key#*=}"
    shift # past argument
    ;;
    # This will delete the existing venv before running the test
    # If you updated external libraries such as ACTS, you need to add this flag
    --clean)
    CLEAN_VENV=true
    shift # past argument
    ;;
    # Repeat running the specified test cases by N times in one single setup
    --repeat=*)
    NUM_REPETITIONS="${key#*=}"
    shift # past argument
    ;;
    # This will log everything to both log file and stdout
    --verbose)
    VERBOSE_MODE=true
    shift # past argument
    ;;
    # This will cause the bluetooth_venv to be created in ashmem
    # Increases --clean build times by 40% (~21 seconds on my machine)
    --gotta-go-slow)
    GOTTA_GO_FAST=false
    shift # past argument
    ;;
    --speed-hax)
    SPEED_HAX=true
    shift # past argument
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [[ -n "$1" ]] ; then
  TEST_FILTER="-tc $1"
fi

CERT_TEST_VENV=$ANDROID_BUILD_TOP/out/dist/bluetooth_venv

YELLOW="\033[1;33m"
NOCOLOR="\033[0m"
BLUE="\033[1;34m"
RED="\033[1;91m"

INSTALL_ARGS="--reuse-acts"
if [ "$CLEAN_VENV" == true ] ; then
  echo -e "${YELLOW}Cleaning up existing virtualenv${NOCOLOR}"
  rm -rf $CERT_TEST_VENV
  mkdir -p ${CERT_TEST_VENV}
  INSTALL_ARGS=""
else
  echo -e "${YELLOW}Try to reuse existing virtualenv at ${CERT_TEST_VENV}${NOCOLOR}"
fi

# Make venv in memory, decreases --clean build times by 40%
# Caveat is you lose the venv if the computer reboots
if [ "${GOTTA_GO_FAST}" == true ] ; then
    if [[ ! -L ${CERT_TEST_VENV} ]] ; then
        echo -e "\t${BLUE}"
        echo -e "\t       ___------__"
        echo -e "\t |\__-- /\       _-"
        echo -e "\t |/_   __      -"
        echo -e "\t // \ /  \    /__"
        echo -e "\t | 0 |  0 |__     --_        Gotta go fast!"
        echo -e "\t \\____-- __ \   ___-"
        echo -e "\t ( @    __/  / /_"
        echo -e "\t    -_____---   --_"
        echo -e "\t     //  \ \\   ___-"
        echo -e "\t   //|\__/  \\  \\"
        echo -e "\t   \_-\_____/  \-\\"
        echo -e "\t        // \\--\|"
        echo -e "\t   ${RED}____${BLUE}//  ||${RED}_"
        echo -e "\t${RED}  /_____\ /___\\"
        echo
        echo
        echo -ne "Making ashmem dist folder..."
        mkdir -p /dev/shm/dist
        rm -rf /dev/shm/bluetooth_venv
        echo -e "Done"
        echo -ne "Moving existing data to memory..."
        mv ${CERT_TEST_VENV} /dev/shm/dist/bluetooth_venv
        echo -e "Done"
        # Ensure the directory doesn't exist
        rm -rf ${CERT_TEST_VENV}
        echo -ne "Sym linking..."
        ln -s /dev/shm/dist/bluetooth_venv ${CERT_TEST_VENV}
        echo -e "Done"
        echo -e "${NOCOLOR}"
    fi
else
    if [[ -L ${CERT_TEST_VENV} ]] ; then
        echo -e "\t${BLUE}"
        echo -e "\t       ___------__"
        echo -e "\t |\__-- /\       _-"
        echo -e "\t |/_    __      -"
        echo -e "\t // \  /  \    /__"
        echo -e "\t | 0 |  0 |__     --_        Gotta go sllloowwww!"
        echo -e "\t \\____-- __ \   ___-"
        echo -e "\t ( @    __   / /_"
        echo -e "\t    -_____---   --_"
        echo -e "\t     //  \ \\   ___-"
        echo -e "\t   //|\__/  \\  \\"
        echo -e "\t   \_-\_____/  \-\\"
        echo -e "\t        // \\--\|"
        echo -e "\t  ${RED} ____${BLUE}//  ||${RED}_"
        echo -e "\t${RED}  /_____\ /___\\"
        echo
        echo
        echo -en "Removing sym link..."
        rm ${CERT_TEST_VENV}
        echo -e "Done"
        echo -en "Moving venv from memory to disk..."
        mv /dev/shm/dist/bluetooth_venv ${CERT_TEST_VENV}
        echo -e "Done"
        echo -en "Cleaning up memory..."
        rm -rf /dev/shm/dist/
        echo -e "Done"
        echo -e "${NOCOLOR}"
    fi
fi

if [ "${SPEED_HAX}" == true ] ; then
    if [[ ! -L /tmp/logs/HostOnlyCert ]] ; then
        echo -e "${RED}Speed H4x Enabled${NOCOLOR}"
        echo -e "${RED}I have the need for speed! ${NOCOLOR}"
        mv /tmp/logs/HostOnlyCert /dev/shm/
        rm -f /tmp/logs/HostOnlyCert
        ln -s /dev/shm/HostOnlyCert /tmp/logs/HostOnlyCert
    fi
else
    if [[ -L /tmp/logs/HostOnlyCert ]] ; then
        echo -e "${RED}Speed H4x Disabled${NOCOLOR}"
        echo -e "${RED}I don't like going fast! ${NOCOLOR}"
        rm -f /tmp/logs/HostOnlyCert
        mv /dev/shm/HostOnlyCert /tmp/logs/
    fi
fi


python3.8 -m virtualenv --python `which python3.8` $CERT_TEST_VENV
if [[ $? -ne 0 ]] ; then
    echo "Error setting up virtualenv"
    exit 1
fi

unzip -o -q $ANDROID_BUILD_TOP/out/dist/bluetooth_cert_tests.zip -d $CERT_TEST_VENV/acts
if [[ $? -ne 0 ]] ; then
    echo "Error unzipping bluetooth_cert_tests.zip"
    exit 1
fi

$CERT_TEST_VENV/bin/python $CERT_TEST_VENV/acts/setup.py --quiet build --force
if [[ $? -ne 0 ]] ; then
    echo "Error building GD Python libraries"
    exit 1
fi

$CERT_TEST_VENV/bin/python $CERT_TEST_VENV/acts/setup.py --quiet install --skip-build --force $INSTALL_ARGS
if [[ $? -ne 0 ]] ; then
    echo "Error installing GD Python libraries"
    exit 1
fi

$CERT_TEST_VENV/bin/python -c "
import bluetooth_packets_python3 as bp3
bp3.BaseStruct
"
if [[ $? -ne 0 ]] ; then
  echo "Setup failed as bluetooth_packets_python3 cannot be imported"
  exit 1
fi

if [ "$VERBOSE_MODE" == true ] ; then
  TEMP_CONFIG=/tmp/temp_acts_config.json
  cat $TEST_CONFIG | $CERT_TEST_VENV/bin/python -c "
import sys
import json
from acts import keys
config = json.load(sys.stdin)
config['verbose_mode'] = True
print(json.dumps(config))
  " > $TEMP_CONFIG
  TEST_CONFIG=$TEMP_CONFIG
  if [[ $? -ne 0 ]] ; then
    echo "Setup failed as verbose mode is chosen but cannot be enabled"
    exit 1
  fi
fi

for n in $(seq $NUM_REPETITIONS); do
  $CERT_TEST_VENV/bin/python $CERT_TEST_VENV/bin/act.py \
      -c $TEST_CONFIG \
      $TEST_FILTER \
      -tp $CERT_TEST_VENV/acts
done

if [ "$CLEAN_VENV" != true ] ; then
  echo -e "${YELLOW}NOTE:${NOCOLOR} Completed tests using existing external libraries in virtualenv."
  echo -e "${YELLOW}NOTE:${NOCOLOR} To update external libraries, please add --clean option."
fi
